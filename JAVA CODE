import java.util.*;

// ====== Payment Request ======
class PaymentRequest {
    private final PaymentType type;
    private final double amount;
    private final String account;
    private final String extra;

    public PaymentRequest(PaymentType type, double amount, String account, String extra) {
        if (amount <= 0) throw new IllegalArgumentException("Amount must be positive");
        this.type = type;
        this.amount = amount;
        this.account = account;
        this.extra = extra;
    }

    public PaymentType type() { return type; }
    public double amount() { return amount; }
    public String account() { return account; }
    public String extra() { return extra; }
}

// ====== Payment Types ======
enum PaymentType { CREDITCARD, UPI, WALLET }

// ====== Payment Result ======
record PaymentResult(String status, String transactionId, String message) {}

// ====== Custom Exception ======
class PaymentException extends Exception {
    public PaymentException(String msg) { super(msg); }
}

// ====== Payment Processor Interface ======
interface PaymentProcessor {
    PaymentResult process(PaymentRequest req) throws PaymentException;
}

// ====== Abstract Base Processor ======
abstract class AbstractProcessor implements PaymentProcessor {
    protected void validateAmount(double amt) throws PaymentException {
        if (amt <= 0) throw new PaymentException("Invalid amount: " + amt);
    }
    protected String txnId() { return UUID.randomUUID().toString().substring(0,8); }
}

// ====== CreditCard Processor ======
class CreditCardProcessor extends AbstractProcessor {
    @Override
    public PaymentResult process(PaymentRequest req) throws PaymentException {
        validateAmount(req.amount());
        if (req.account() == null || req.account().length() < 12)
            throw new PaymentException("Invalid card number");
        if (req.extra() == null || !req.extra().matches("(0[1-9]|1[0-2])/\\d{4}"))
            throw new PaymentException("Invalid expiry date (MM/yyyy)");
        return new PaymentResult("SUCCESS", txnId(),
                "CreditCard payment of " + req.amount() + " processed.");
    }
}

// ====== UPI Processor ======
class UPIProcessor extends AbstractProcessor {
    @Override
    public PaymentResult process(PaymentRequest req) throws PaymentException {
        validateAmount(req.amount());
        if (req.account() == null || !req.account().contains("@"))
            throw new PaymentException("Invalid UPI ID");
        return new PaymentResult("SUCCESS", txnId(),
                "UPI payment of " + req.amount() + " processed.");
    }
}

// ====== Wallet Processor ======
class WalletProcessor extends AbstractProcessor {
    @Override
    public PaymentResult process(PaymentRequest req) throws PaymentException {
        validateAmount(req.amount());
        if (req.account() == null || req.account().isEmpty())
            throw new PaymentException("Invalid wallet ID");
        return new PaymentResult("SUCCESS", txnId(),
                "Wallet payment of " + req.amount() + " processed.");
    }
}

// ====== Payment Gateway (Polymorphic) ======
class PaymentGateway {
    private final Map<PaymentType, PaymentProcessor> processors = new HashMap<>();
    public PaymentGateway() {
        processors.put(PaymentType.CREDITCARD, new CreditCardProcessor());
        processors.put(PaymentType.UPI, new UPIProcessor());
        processors.put(PaymentType.WALLET, new WalletProcessor());
    }
    public PaymentResult process(PaymentRequest req) throws PaymentException {
        PaymentProcessor p = processors.get(req.type());
        if (p == null) throw new PaymentException("Unsupported type");
        return p.process(req);
    }
}

// ====== Main Application ======
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        PaymentGateway gw = new PaymentGateway();

        while (true) {
            System.out.println("\n=== Payment Menu ===");
            System.out.println("1. CreditCard\n2. UPI\n3. Wallet\n4. Exit");
            System.out.print("Choice: ");
            int c = sc.nextInt(); sc.nextLine();
            if (c == 4) break;

            PaymentType t = switch (c) {
                case 1 -> PaymentType.CREDITCARD;
                case 2 -> PaymentType.UPI;
                case 3 -> PaymentType.WALLET;
                default -> null;
            };

            if (t == null) {
                System.out.println("Invalid choice, try again.");
                continue;
            }

            System.out.print("Amount: ");
            double amt = sc.nextDouble(); sc.nextLine();

            System.out.print("Account/ID: ");
            String acc = sc.nextLine();

            String exp = null;
            if (t == PaymentType.CREDITCARD) {
                System.out.print("Expiry (MM/yyyy): ");
                exp = sc.nextLine();
            }

            PaymentRequest req = new PaymentRequest(t, amt, acc, exp);
            try {
                PaymentResult res = gw.process(req);
                System.out.printf("✅ STATUS: %s | Txn: %s\n",
                        res.status(), res.transactionId());
            } catch (PaymentException e) {
                System.out.println("❌ FAILED: " + e.getMessage());
            }
        }

        sc.close();
    }
}
